pipeline {
  agent any 
  environment {
		DOCKERHUB_CREDENTIALS=credentials('ram-dockerhub-login')
		TRIVY_CRITICAL_THRES=200
		DOCK_IMG_NAME="34.67.194.116/appointme-admin-api:ram-new"
		NGINX_PROXY_URL="34.67.194.116"
		date_format = new Date().format('dd-MM-yy-HHmm')
		HELM_REL_NAME="appoint-admin-api"
		HELM_DEP_TIMEOUT=302
		
	      }
    stages {
    stage('Deploy Application') 
    {
      when {
                expression {
                    !env.GIT_BRANCH.contains("main")
                           }
            }
      steps { 
                
	      /* withCredentials([kubeconfigContent(credentialsId: 'kubernetes-ram', variable: 'KUBECONFIG_CONTENT')])  */
	      withCredentials([kubeconfigFile(credentialsId: 'kubeconfig-cred', variable: 'KUBECONFIG')]) 
	      {
	        sh '''
		datree config set token ad6dfafb-9ff1-44c5-a175-8bba5e1d16a7
		helm template  --set image.repository=${DOCK_IMG_NAME} --set image.tag="${date_format}" appoint-admin-api ./helm > ./helm/script.yaml 
		#helm datree test helm -- --values ./helm/values.yaml  --set image.repository=${DOCK_IMG_NAME}
		
		helm upgrade --install --wait --timeout ${HELM_DEP_TIMEOUT}s --set image.repository=${DOCK_IMG_NAME} --set image.tag="${date_format}" ${HELM_REL_NAME} helm/ || true
		
		helm --kubeconfig /opt/kubeconfig history ${HELM_REL_NAME}|tail -1|grep -i "failed" 
		IS_DEP_FAILED=$?
		
		
		if [ ${IS_DEP_FAILED} -eq 0 ]
		then
		  ROLLBACK_TO=`helm --kubeconfig /opt/kubeconfig history ${HELM_REL_NAME}|grep -i "deployed"|tail -1|cut -f1`   
		  echo "The Deployment has failed...Rolling back to the last successful Revision:"${ROLLBACK_TO}
		  helm rollback --wait --timeout ${HELM_DEP_TIMEOUT}s ${HELM_REL_NAME} ${ROLLBACK_TO}
		fi
		'''
              }
            }
     }
 }
}
